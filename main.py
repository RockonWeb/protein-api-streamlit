import streamlit as st
import pandas as pd
import requests
import io
from typing import List, Dict, Any
import math
import plotly.express as px
import plotly.graph_objects as go

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏/—É—Ç–∏–ª–∏—Ç—ã UI
# -------------------------

def _inject_base_css() -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ CSS-—Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫, —à–∞–ø–∫–∏-–º–µ—Ç—Ä–∏–∫ –∏ —Ç–∞–±–ª–∏—Ü."""
    st.markdown(
        """
        <style>
        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä KPI –∫–∞—Ä—Ç–æ—á–µ–∫ */
        .kpi-card {
            background: linear-gradient(135deg, #0ea5e9 0%, #22d3ee 100%);
            color: #ffffff;
            padding: 14px 16px;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(2,132,199,0.25);
            border: 1px solid rgba(255,255,255,0.15);
        }
        .kpi-title {
            font-size: 13px;
            letter-spacing: 0.4px;
            opacity: 0.95;
            margin-bottom: 6px;
        }
        .kpi-value {
            font-size: 26px;
            font-weight: 700;
            line-height: 1.1;
        }
        .kpi-sub {
            font-size: 12px;
            opacity: 0.9;
            margin-top: 6px;
        }

        /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */
        .card {
            background: #ffffff;
            border-radius: 12px;
            border: 1px solid rgba(0,0,0,0.07);
            box-shadow: 0 6px 18px rgba(0,0,0,0.06);
            padding: 14px 14px 12px 14px;
            margin-bottom: 12px;
        }
        .card-title {
            font-size: 16px;
            font-weight: 700;
            margin: 0 0 6px 0;
        }
        .card-subtitle { font-size: 12px; color: #475569; margin-bottom: 10px; }
        .pill {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 999px;
            background: #f1f5f9;
            color: #0f172a;
            font-size: 11px;
            border: 1px solid #e2e8f0;
            margin-right: 6px;
            margin-bottom: 6px;
        }
        .row-divider { height: 6px; }
        .ext-link a { text-decoration: none; font-size: 12px; }
        .ext-link a:hover { text-decoration: underline; }
        </style>
        """,
        unsafe_allow_html=True,
    )


def _render_kpi(label: str, value: str, sub: str = "") -> None:
    """–†–∏—Å—É–µ—Ç KPI-–∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Streamlit."""
    st.markdown(
        f"""
        <div class="kpi-card">
          <div class="kpi-title">{label}</div>
          <div class="kpi-value">{value}</div>
          <div class="kpi-sub">{sub}</div>
        </div>
        """,
        unsafe_allow_html=True,
    )


def _get_totals(api_base: str) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–ø–∫–∏: –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã, —Ñ–µ—Ä–º–µ–Ω—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å API."""
    totals = {"metabolites": None, "enzymes": None, "api_status": "unknown"}

    # –°—Ç–∞—Ç—É—Å API
    try:
        resp = requests.get(f"{api_base}/health", timeout=5)
        if resp.ok:
            data = resp.json()
            totals["api_status"] = data.get("status", "unknown")
            # –ë–æ–Ω—É—Å: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç metabolites_count
            if data.get("metabolites_count") is not None:
                totals["metabolites"] = int(data["metabolites_count"])
    except Exception:
        totals["api_status"] = "offline"

    # –û–±—â–µ–µ —á–∏—Å–ª–æ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ /health)
    if totals["metabolites"] is None:
        try:
            resp = requests.get(f"{api_base}/metabolites/search", params={"page_size": 1}, timeout=10)
            if resp.ok:
                totals["metabolites"] = int(resp.json().get("total", 0))
        except Exception:
            totals["metabolites"] = None

    # –û–±—â–µ–µ —á–∏—Å–ª–æ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
    try:
        resp = requests.get(f"{api_base}/enzymes/search", params={"page_size": 1}, timeout=10)
        if resp.ok:
            totals["enzymes"] = int(resp.json().get("total", 0))
    except Exception:
        totals["enzymes"] = None

    return totals


def _render_metabolite_card(m: Dict[str, Any]) -> None:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ñ–æ—Ä–º—É–ª–∞, –º–∞—Å—Å–∞, –∫–ª–∞—Å—Å –∏ –≤–Ω–µ—à–Ω–∏–µ ID."""
    name = m.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    formula = m.get("formula") or "‚Äî"
    mass = m.get("exact_mass")
    mass_fmt = f"{mass:.6f} Da" if isinstance(mass, (int, float)) else "‚Äî"
    cls = m.get("class_name") or "‚Äî"

    links = []
    if m.get("hmdb_id"):
        links.append(f"<span class='ext-link'><a href='https://hmdb.ca/metabolites/{m['hmdb_id']}' target='_blank'>HMDB</a></span>")
    if m.get("kegg_id"):
        links.append(f"<span class='ext-link'><a href='https://www.kegg.jp/entry/{m['kegg_id']}' target='_blank'>KEGG</a></span>")
    if m.get("chebi_id"):
        links.append(f"<span class='ext-link'><a href='https://www.ebi.ac.uk/chebi/searchId.do?chebiId={m['chebi_id']}' target='_blank'>ChEBI</a></span>")
    if m.get("pubchem_cid"):
        links.append(f"<span class='ext-link'><a href='https://pubchem.ncbi.nlm.nih.gov/compound/{m['pubchem_cid']}' target='_blank'>PubChem</a></span>")
    links_html = " &middot; ".join(links) if links else ""

    pills = []
    if cls and cls != "‚Äî":
        pills.append(f"<span class='pill'>{cls}</span>")
    pills_html = " ".join(pills)

    st.markdown(
        f"""
        <div class="card">
          <div class="card-title">{name}</div>
          <div class="card-subtitle">–§–æ—Ä–º—É–ª–∞: <b>{formula}</b> &nbsp;|&nbsp; –ú–∞—Å—Å–∞: <b>{mass_fmt}</b></div>
          <div>{pills_html}</div>
          <div class="row-divider"></div>
          <div>{links_html}</div>
        </div>
        """,
        unsafe_allow_html=True,
    )


def _render_enzyme_card(e: Dict[str, Any]) -> None:
    name = e.get("name") or e.get("name_en") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    ec = e.get("ec_number") or "‚Äî"
    org = e.get("organism") or "‚Äî"
    fam = e.get("family") or "‚Äî"
    props = []
    if ec != "‚Äî":
        props.append(f"EC: <b>{ec}</b>")
    if org != "‚Äî":
        props.append(f"–û—Ä–≥–∞–Ω–∏–∑–º: <b>{org}</b>")
    if fam != "‚Äî":
        props.append(f"–°–µ–º–µ–π—Å—Ç–≤–æ: <b>{fam}</b>")
    subtitle = " &nbsp;|&nbsp; ".join(props)
    st.markdown(
        f"""
        <div class="card">
          <div class="card-title">{name}</div>
          <div class="card-subtitle">{subtitle}</div>
        </div>
        """,
        unsafe_allow_html=True,
    )

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
import os
API_BASE_URL = os.getenv("API_BASE_URL", "http://127.0.0.1:8000")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
_inject_base_css()
st.title("üß¨ –ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
st.markdown("**–£—á–µ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö LC-MS**")

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
# with st.expander("üîç DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ session_state"):
#     st.write("**–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã:**")
#     st.write(f"- met_page: {st.session_state.get('met_page', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
#     st.write(f"- met_search_results: {len(st.session_state.get('met_search_results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
#     st.write(f"- view_mode: {st.session_state.get('view_mode', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
#     st.write(f"- search_submitted: {st.session_state.get('search_submitted', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
#     
#     st.write("**–§–µ—Ä–º–µ–Ω—Ç—ã:**")
#     st.write(f"- enz_page: {st.session_state.get('enz_page', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
#     st.write(f"- enz_view_mode: {st.session_state.get('enz_view_mode', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")

# KPI –ø–∞–Ω–µ–ª—å
totals = _get_totals(API_BASE_URL)
col_k1, col_k2, col_k3 = st.columns(3)
with col_k1:
    _render_kpi("–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", f"{totals.get('metabolites') if totals.get('metabolites') is not None else '‚Äî'}", "–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ë–î")
with col_k2:
    _render_kpi("–§–µ—Ä–º–µ–Ω—Ç—ã", f"{totals.get('enzymes') if totals.get('enzymes') is not None else '‚Äî'}", "–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ë–î")
with col_k3:
    status = totals.get("api_status", "unknown")
    status_ru = "–æ–Ω–ª–∞–π–Ω" if status == "healthy" else ("–æ—Ñ–ª–∞–π–Ω" if status == "offline" else status)
    _render_kpi("–°—Ç–∞—Ç—É—Å API", status_ru, "—Å–µ—Ä–≤–∏—Å /health")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
st.sidebar.markdown("## üîç **–ü–æ–∏—Å–∫**")
st.sidebar.markdown("*–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –∏ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤*")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è state
if "met_page" not in st.session_state:
    st.session_state.met_page = 1
if "met_page_size" not in st.session_state:
    st.session_state.met_page_size = 50
if "met_sort_by" not in st.session_state:
    st.session_state.met_sort_by = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"
if "search_submitted" not in st.session_state:
    st.session_state.search_submitted = False
if "view_mode" not in st.session_state:
    st.session_state.view_mode = "–ö–∞—Ä—Ç–æ—á–∫–∏"
if "enz_view_mode" not in st.session_state:
    st.session_state.enz_view_mode = "–ö–∞—Ä—Ç–æ—á–∫–∏"

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
st.sidebar.markdown("### üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞")
search_type = st.sidebar.radio(
    "–¢–∏–ø –ø–æ–∏—Å–∫–∞",
    options=["üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", "üß™ –§–µ—Ä–º–µ–Ω—Ç—ã"],
    horizontal=True,
    key="search_type_selector"
)

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
if search_type == "üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã":
    st.sidebar.success("üîç –ê–∫—Ç–∏–≤–µ–Ω –ø–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
else:
    st.sidebar.info("üîç –ê–∫—Ç–∏–≤–µ–Ω –ø–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")

# –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
if search_type == "üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã":
    st.sidebar.markdown("---")
    with st.sidebar.form("metabolite_search_form"):
        st.subheader("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
        
        mode = st.radio(
            "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞",
            options=["–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Ñ–æ—Ä–º—É–ª–µ", "–ü–æ –º–∞—Å—Å–µ (m/z)"],
            horizontal=False,
        )

        search_query = ""
        mass_query = 0.0

        if mode == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Ñ–æ—Ä–º—É–ª–µ":
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è preset_query
            if "preset_query" not in st.session_state:
                st.session_state.preset_query = ""
            
            search_query = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∞",
                value=st.session_state.preset_query,
                placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥–ª—é–∫–æ–∑–∞, C6H12O6",
                key="met_text_query",
            )
            
            # –°–±—Ä–æ—Å preset –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if st.session_state.preset_query:
                st.session_state.preset_query = ""
        else:
            mass_query = st.number_input(
                "–ú–∞—Å—Å–∞ (m/z)", min_value=0.0, step=0.001, format="%.6f", key="met_mass_query"
            )

        col_fs1, col_fs2 = st.columns(2)
        with col_fs1:
            tolerance_ppm = st.slider("–î–æ–ø—É—Å–∫ (ppm)", min_value=1, max_value=100, value=10, step=1)
        with col_fs2:
            st.session_state.met_page_size = st.selectbox(
                "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                options=[25, 50, 100, 200],
                index=[25, 50, 100, 200].index(st.session_state.met_page_size)
                if st.session_state.met_page_size in [25, 50, 100, 200]
                else 1,
            )

        # –ü—Ä–µ—Å–µ—Ç—ã
        st.caption("üí° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:")
        presets_col1, presets_col2, presets_col3 = st.columns(3)
        with presets_col1:
            if st.form_submit_button("–ì–ª—é–∫–æ–∑–∞", use_container_width=True):
                st.session_state.met_page = 1
                st.session_state.preset_query = "–≥–ª—é–∫–æ–∑–∞"
        with presets_col2:
            if st.form_submit_button("–ü–∏—Ä—É–≤–∞—Ç", use_container_width=True):
                st.session_state.met_page = 1
                st.session_state.preset_query = "–ø–∏—Ä—É–≤–∞—Ç"
        with presets_col3:
            if st.form_submit_button("C6H12O6", use_container_width=True):
                st.session_state.met_page = 1
                st.session_state.preset_query = "C6H12O6"

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã", use_container_width=True, type="primary")
        
        if search_submitted:
            st.session_state.met_page = 1
            st.session_state.search_submitted = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if mode == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Ñ–æ—Ä–º—É–ª–µ":
                st.session_state.last_search_query = search_query
                st.session_state.last_mass_query = None
            else:
                st.session_state.last_search_query = None
                st.session_state.last_mass_query = mass_query
            st.session_state.last_tolerance_ppm = tolerance_ppm
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            try:
                params = {"page": 1, "page_size": st.session_state.met_page_size}
                if search_query:
                    params["q"] = search_query
                if mass_query:
                    params["mass"] = mass_query
                if tolerance_ppm:
                    params["tol_ppm"] = tolerance_ppm
                
                response = requests.get(f"{API_BASE_URL}/metabolites/search", params=params)
                if response.status_code == 200:
                    data = response.json()
                    st.session_state.met_search_results = data.get("metabolites", [])
                    st.session_state.met_total_results = data.get("total", 0)
                    st.rerun()
            except Exception:
                pass

# –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
elif search_type == "üß™ –§–µ—Ä–º–µ–Ω—Ç—ã":
    st.sidebar.markdown("---")
    with st.sidebar.form("enzyme_search_form"):
        st.subheader("üîç –ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enz_preset_query
            if "enz_preset_query" not in st.session_state:
                st.session_state.enz_preset_query = ""
            
            enzyme_query = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ, EC –Ω–æ–º–µ—Ä –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–º",
                value=st.session_state.enz_preset_query,
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Ribulose, dehydrogenase, 4.1.1.39",
                help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞, EC –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞"
            )
            
            # –°–±—Ä–æ—Å preset –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if st.session_state.enz_preset_query:
                st.session_state.enz_preset_query = ""
            
        with col2:
            organism_type = st.selectbox(
                "üå± –¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞",
                ["–í—Å–µ", "plant", "animal", "bacteria", "fungi"],
                help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ—Ä–≥–∞–Ω–∏–∑–º–∞"
            )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if "enz_page" not in st.session_state:
            st.session_state.enz_page = 1
        if "enz_page_size" not in st.session_state:
            st.session_state.enz_page_size = 50
        if "enz_sort_by" not in st.session_state:
            st.session_state.enz_sort_by = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"

        colp1, colp2 = st.columns(2)
        with colp1:
            st.session_state.enz_page_size = st.selectbox(
                "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                options=[25, 50, 100, 200],
                index=[25, 50, 100, 200].index(st.session_state.enz_page_size)
                if st.session_state.enz_page_size in [25, 50, 100, 200]
                else 1,
            )
        with colp2:
            st.session_state.enz_sort_by = st.selectbox(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
                options=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "EC", "–û—Ä–≥–∞–Ω–∏–∑–º", "–°–µ–º–µ–π—Å—Ç–≤–æ"],
            )

        # –ü—Ä–µ—Å–µ—Ç—ã
        st.caption("üí° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:")
        pcol1, pcol2, pcol3 = st.columns(3)
        with pcol1:
            if st.form_submit_button("Ribulose", use_container_width=True):
                st.session_state.enz_page = 1
                st.session_state.enz_preset_query = "Ribulose"
        with pcol2:
            if st.form_submit_button("dehydrogenase", use_container_width=True):
                st.session_state.enz_page = 1
                st.session_state.enz_preset_query = "dehydrogenase"
        with pcol3:
            if st.form_submit_button("4.1.1.39", use_container_width=True):
                st.session_state.enz_page = 1
                st.session_state.enz_preset_query = "4.1.1.39"

        submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏ —Ñ–µ—Ä–º–µ–Ω—Ç—ã", use_container_width=True, type="primary")
        
        if submitted:
            st.session_state.enz_page = 1
        
        if submitted:
            if enzyme_query or organism_type != "–í—Å–µ":
                try:
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                    params = {"page_size": st.session_state.enz_page_size, "page": st.session_state.enz_page}
                    if enzyme_query:
                        params["q"] = enzyme_query
                    if organism_type != "–í—Å–µ":
                        params["organism_type"] = organism_type
                    
                    # –ó–∞–ø—Ä–æ—Å –∫ API
                    response = requests.get(f"{API_BASE_URL}/enzymes/search", params=params)
                    
                    if response.status_code == 200:
                        data = response.json()
                        enzymes = data.get("enzymes", [])
                        total = data.get("total", 0)
                        total_pages = max(1, math.ceil(total / st.session_state.enz_page_size))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ —Ñ–æ—Ä–º—ã
                        st.session_state.enz_search_results = enzymes
                        st.session_state.enz_total_results = total
                        st.session_state.enz_total_pages = total_pages
                        st.session_state.enz_last_query = enzyme_query
                        st.session_state.enz_last_organism_type = organism_type
                        st.session_state.enz_search_submitted = True
                        
                        if enzymes:
                            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
                        else:
                            st.warning("üîç –§–µ—Ä–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                        
                except requests.exceptions.RequestException:
                    st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω–∏–∑—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.caption("üí° **–°–æ–≤–µ—Ç:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
if st.session_state.get("search_submitted", False) and st.session_state.get("met_search_results"):
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    metabolites = st.session_state.get("met_search_results", [])
    total = st.session_state.get("met_total_results", 0)
    total_pages = max(1, math.ceil(total / st.session_state.met_page_size))
    
    if metabolites:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(metabolites)} –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤–∏–¥ (–≤—ã–Ω–µ—Å–µ–Ω–æ –Ω–∞–≤–µ—Ä—Ö –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        col_v1, col_v2 = st.columns([1, 1])
        with col_v1:
            st.session_state.met_sort_by = st.selectbox(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
                options=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞", "–ö–ª–∞—Å—Å"],
                index=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞", "–ö–ª–∞—Å—Å"].index(
                    st.session_state.met_sort_by
                )
                if st.session_state.met_sort_by in ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞", "–ö–ª–∞—Å—Å"]
                else 0,
                key="met_sort_select"
            )
        with col_v2:
            view_choice = st.radio(
                "–í–∏–¥", 
                options=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"], 
                horizontal=True, 
                index=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"].index(st.session_state.view_mode),
                key="met_view_radio"
            )
            if view_choice != st.session_state.view_mode:
                st.session_state.view_mode = view_choice

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if st.session_state.met_sort_by != "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å":
            key_map = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": lambda m: (m.get("name") or "").lower(),
                "–ú–∞—Å—Å–∞": lambda m: m.get("exact_mass") or 0,
                "–ö–ª–∞—Å—Å": lambda m: (m.get("class_name") or "").lower(),
            }
            metabolites = sorted(metabolites, key=key_map[st.session_state.met_sort_by])
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.session_state.met_search_results = metabolites

        # –¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        df_data = []
        for met in metabolites:
            df_data.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": met.get("name", ""),
                "–§–æ—Ä–º—É–ª–∞": met.get("formula", ""),
                "–ú–∞—Å—Å–∞": f"{met['exact_mass']:.6f}" if isinstance(met.get('exact_mass'), (int, float)) else "",
                "–ö–ª–∞—Å—Å": met.get("class_name", ""),
                "HMDB ID": met.get("hmdb_id", ""),
                "KEGG ID": met.get("kegg_id", ""),
                "ChEBI ID": met.get("chebi_id", ""),
                "PubChem CID": met.get("pubchem_cid", "")
            })
        df = pd.DataFrame(df_data)

        if st.session_state.view_mode == "–¢–∞–±–ª–∏—Ü–∞":
            st.dataframe(df, use_container_width=True)
        else:
            # –ö–∞—Ä—Ç–æ—á–∫–∏, 3 –∫–æ–ª–æ–Ω–∫–∏
            cols = st.columns(3)
            for idx, met in enumerate(metabolites):
                with cols[idx % 3]:
                    _render_metabolite_card(met)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ –º–∞—Å—Å–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if len(df) and (df["–ú–∞—Å—Å–∞"] != "").any():
            try:
                df_mass = df[df["–ú–∞—Å—Å–∞"] != ""].copy()
                df_mass["–ú–∞—Å—Å–∞"] = df_mass["–ú–∞—Å—Å–∞"].astype(float)
                st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å (m/z) –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                fig = px.histogram(df_mass, x="–ú–∞—Å—Å–∞", nbins=30, height=280)
                st.plotly_chart(fig, use_container_width=True)
            except Exception:
                pass

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
if st.session_state.get("enz_search_submitted", False) and st.session_state.get("enz_search_results"):
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    enzymes = st.session_state.get("enz_search_results", [])
    total = st.session_state.get("enz_total_results", 0)
    
    if enzymes:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(enzymes)} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω–æ –Ω–∞–≤–µ—Ä—Ö –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        col_v1, col_v2 = st.columns([1, 1])
        with col_v1:
            st.session_state.enz_sort_by = st.selectbox(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
                options=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "EC", "–û—Ä–≥–∞–Ω–∏–∑–º", "–°–µ–º–µ–π—Å—Ç–≤–æ"],
                index=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "EC", "–û—Ä–≥–∞–Ω–∏–∑–º", "–°–µ–º–µ–π—Å—Ç–≤–æ"].index(
                    st.session_state.enz_sort_by
                )
                if st.session_state.enz_sort_by in ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "EC", "–û—Ä–≥–∞–Ω–∏–∑–º", "–°–µ–º–µ–π—Å—Ç–≤–æ"]
                else 0,
                key="enz_sort_select"
            )
        with col_v2:
            enz_view_choice = st.radio(
                "–í–∏–¥", 
                options=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"], 
                horizontal=True, 
                index=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"].index(st.session_state.enz_view_mode),
                key="enz_view_radio"
            )
            if enz_view_choice != st.session_state.enz_view_mode:
                st.session_state.enz_view_mode = enz_view_choice

        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_data = []
        for enzyme in enzymes:
            df_data.append({
                "ID": enzyme.get("id"),
                "–ù–∞–∑–≤–∞–Ω–∏–µ": enzyme.get("name", ""),
                "EC –Ω–æ–º–µ—Ä": enzyme.get("ec_number", ""),
                "–û—Ä–≥–∞–Ω–∏–∑–º": enzyme.get("organism", ""),
                "–¢–∏–ø": enzyme.get("organism_type", ""),
                "–°–µ–º–µ–π—Å—Ç–≤–æ": enzyme.get("family", ""),
                "–ú–æ–ª. –º–∞—Å—Å–∞ (kDa)": enzyme.get("molecular_weight"),
                "–û–ø—Ç. pH": enzyme.get("optimal_ph"),
                "–û–ø—Ç. T¬∞C": enzyme.get("optimal_temperature"),
                "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è": enzyme.get("subcellular_location", "")
            })
        df = pd.DataFrame(df_data)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if st.session_state.enz_sort_by != "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å" and len(df):
            sort_map = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "EC": "EC –Ω–æ–º–µ—Ä",
                "–û—Ä–≥–∞–Ω–∏–∑–º": "–û—Ä–≥–∞–Ω–∏–∑–º",
                "–°–µ–º–µ–π—Å—Ç–≤–æ": "–°–µ–º–µ–π—Å—Ç–≤–æ",
            }
            if st.session_state.enz_sort_by in sort_map:
                df = df.sort_values(by=sort_map[st.session_state.enz_sort_by], kind="mergesort")
                # —Ç–∞–∫–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                key_funcs = {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": lambda e: (e.get("name") or "").lower(),
                    "EC": lambda e: (e.get("ec_number") or ""),
                    "–û—Ä–≥–∞–Ω–∏–∑–º": lambda e: (e.get("organism") or "").lower(),
                    "–°–µ–º–µ–π—Å—Ç–≤–æ": lambda e: (e.get("family") or "").lower(),
                }
                enzymes = sorted(enzymes, key=key_funcs[st.session_state.enz_sort_by])
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state.enz_search_results = enzymes

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        if st.session_state.enz_view_mode == "–¢–∞–±–ª–∏—Ü–∞":
            st.dataframe(df, use_container_width=True)
        else:
            # –ö–∞—Ä—Ç–æ—á–∫–∏, 3 –∫–æ–ª–æ–Ω–∫–∏
            cols = st.columns(3)
            for idx, e in enumerate(enzymes):
                with cols[idx % 3]:
                    _render_enzyme_card(e)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–µ–ª–µ–∫—Ç–æ—Ä)
        with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ñ–µ—Ä–º–µ–Ω—Ç—É"):
            selected_enzyme_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ—Ä–º–µ–Ω—Ç:",
                options=[e["id"] for e in enzymes],
                format_func=lambda x: f"{x}: {next(e['name'] for e in enzymes if e['id'] == x)}"
            )

            if selected_enzyme_id:
                selected_enzyme = next(e for e in enzymes if e["id"] == selected_enzyme_id)
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {selected_enzyme.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–ë–µ–ª–æ–∫:** {selected_enzyme.get('protein_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–ì–µ–Ω:** {selected_enzyme.get('gene_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**EC –Ω–æ–º–µ—Ä:** {selected_enzyme.get('ec_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–°–µ–º–µ–π—Å—Ç–≤–æ:** {selected_enzyme.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**UniProt ID:** {selected_enzyme.get('uniprot_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                with col2:
                    st.markdown("**–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:**")
                    if selected_enzyme.get('molecular_weight'):
                        st.write(f"**–ú–æ–ª. –º–∞—Å—Å–∞:** {selected_enzyme['molecular_weight']:.1f} kDa")
                    if selected_enzyme.get('optimal_ph'):
                        st.write(f"**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π pH:** {selected_enzyme['optimal_ph']}")
                    if selected_enzyme.get('optimal_temperature'):
                        st.write(f"**–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è T:** {selected_enzyme['optimal_temperature']}¬∞C")
                    st.write(f"**–û—Ä–≥–∞–Ω–∏–∑–º:** {selected_enzyme.get('organism', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:** {selected_enzyme.get('subcellular_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                if selected_enzyme.get('description'):
                    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
                    st.write(selected_enzyme['description'])
                if selected_enzyme.get('tissue_specificity'):
                    st.markdown("**–¢–∫–∞–Ω–µ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å:**")
                    st.write(selected_enzyme['tissue_specificity'])

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
if st.session_state.get("search_submitted", False) and st.session_state.get("met_total_results", 0):
    total = st.session_state.get("met_total_results", 0)
    total_pages = max(1, math.ceil(total / st.session_state.met_page_size))
    
    if total_pages > 1:
        st.subheader("üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
        pc1, pc2, pc3 = st.columns([1, 2, 1])
        with pc1:
            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", disabled=st.session_state.met_page <= 1, key="met_prev"):
                st.session_state.met_page = max(1, st.session_state.met_page - 1)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    params = {"page": st.session_state.met_page, "page_size": st.session_state.met_page_size}
                    if st.session_state.get("last_search_query"):
                        params["q"] = st.session_state.last_search_query
                    if st.session_state.get("last_mass_query"):
                        params["mass"] = st.session_state.last_mass_query
                    if st.session_state.get("last_tolerance_ppm"):
                        params["tol_ppm"] = st.session_state.last_tolerance_ppm
                    
                    response = requests.get(f"{API_BASE_URL}/metabolites/search", params=params)
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.met_search_results = data.get("metabolites", [])
                        st.rerun()
                except Exception:
                    pass
        with pc2:
            st.markdown(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {st.session_state.met_page} –∏–∑ {total_pages}")
        with pc3:
            if st.button("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", disabled=st.session_state.met_page >= total_pages, key="met_next"):
                st.session_state.met_page = min(total_pages, st.session_state.met_page + 1)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    params = {"page": st.session_state.met_page, "page_size": st.session_state.met_page_size}
                    if st.session_state.get("last_search_query"):
                        params["q"] = st.session_state.last_search_query
                    if st.session_state.get("last_mass_query"):
                        params["mass"] = st.session_state.last_mass_query
                    if st.session_state.get("last_tolerance_ppm"):
                        params["tol_ppm"] = st.session_state.last_tolerance_ppm
                    
                    response = requests.get(f"{API_BASE_URL}/metabolites/search", params=params)
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.met_search_results = data.get("metabolites", [])
                        st.rerun()
                except Exception:
                    pass

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
if st.session_state.get("enz_search_submitted", False) and st.session_state.get("enz_total_results", 0):
    total = st.session_state.get("enz_total_results", 0)
    total_pages = max(1, math.ceil(total / st.session_state.enz_page_size))
    
    if total_pages > 1:
        st.subheader("üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        pc1, pc2, pc3 = st.columns([1, 2, 1])
        
        with pc1:
            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", key="enz_prev", disabled=st.session_state.enz_page <= 1):
                st.session_state.enz_page = max(1, st.session_state.enz_page - 1)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    params = {"page": st.session_state.enz_page, "page_size": st.session_state.enz_page_size}
                    if st.session_state.get("enz_last_query"):
                        params["q"] = st.session_state.enz_last_query
                    if st.session_state.get("enz_last_organism_type") != "–í—Å–µ":
                        params["organism_type"] = st.session_state.enz_last_organism_type
                    
                    response = requests.get(f"{API_BASE_URL}/enzymes/search", params=params)
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.enz_search_results = data.get("enzymes", [])
                        st.rerun()
                except Exception:
                    pass
                    
        with pc2:
            st.markdown(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {st.session_state.enz_page} –∏–∑ {total_pages}")
            
        with pc3:
            if st.button("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", key="enz_next", disabled=st.session_state.enz_page >= total_pages):
                st.session_state.enz_page = min(total_pages, st.session_state.enz_page + 1)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    params = {"page": st.session_state.enz_page, "page_size": st.session_state.enz_page_size}
                    if st.session_state.get("enz_last_query"):
                        params["q"] = st.session_state.enz_last_query
                    if st.session_state.get("enz_last_organism_type") != "–í—Å–µ":
                        params["organism_type"] = st.session_state.enz_last_organism_type
                    
                    response = requests.get(f"{API_BASE_URL}/enzymes/search", params=params)
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.enz_search_results = data.get("enzymes", [])
                        st.rerun()
                except Exception:
                    pass

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
tab1, tab2, tab3, tab4 = st.tabs(["üîç –ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤", "üß™ –ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤", "üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV", "üìö –°–ø—Ä–∞–≤–∫–∞"])

with tab1:
    st.header("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
    st.markdown("""
    **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤!**
    
    –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ:
    - **–ù–∞–∑–≤–∞–Ω–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥–ª—é–∫–æ–∑–∞, –ø–∏—Ä—É–≤–∞—Ç)
    - **–•–∏–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä: C6H12O6)
    - **–ú–∞—Å—Å–µ (m/z)** —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–ø—É—Å–∫–∞ –≤ ppm
    """)
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
    st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é:**")
        st.code("–≥–ª—é–∫–æ–∑–∞")
        st.code("–ø–∏—Ä—É–≤–∞—Ç")
        st.code("–∞–ª–∞–Ω–∏–Ω")
    
    with col2:
        st.markdown("**–ü–æ –º–∞—Å—Å–µ:**")
        st.code("180.063 ¬±10 ppm")
        st.code("88.016 ¬±5 ppm")
        st.code("507.182 ¬±20 ppm")

with tab2:
    st.header("üß™ –ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
    st.markdown("""
    **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤!** 
    
    –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ:
    - **–ù–∞–∑–≤–∞–Ω–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä: Ribulose, dehydrogenase)
    - **EC –Ω–æ–º–µ—Ä—É** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.1.1.39, 1.1.1)
    - **–û—Ä–≥–∞–Ω–∏–∑–º—É** (–Ω–∞–ø—Ä–∏–º–µ—Ä: Arabidopsis, Cucumis)
    - **–¢–∏–ø—É –æ—Ä–≥–∞–Ω–∏–∑–º–∞** (plant, animal, bacteria, fungi)
    """)
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
    st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é:**")
        st.code("RuBisCO")
        st.code("–ì–ª—É—Ç–∞–º–∏–Ω-—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞")
        st.code("–ù–∏—Ç—Ä–∞—Ç-—Ä–µ–¥—É–∫—Ç–∞–∑–∞")
        
        st.markdown("**–ü–æ —Å–µ–º–µ–π—Å—Ç–≤—É:**")
        st.code("–û–∫—Å–∏–¥–æ—Ä–µ–¥—É–∫—Ç–∞–∑—ã")
        st.code("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑—ã")
        st.code("–ì–∏–¥—Ä–æ–ª–∞–∑—ã")
    
    with col2:
        st.markdown("**–ü–æ EC –Ω–æ–º–µ—Ä—É:**")
        st.code("4.1.1.39")
        st.code("6.3.1.2")
        st.code("1.7.1.1")
        
        st.markdown("**–ü–æ –æ—Ä–≥–∞–Ω–∏–∑–º—É:**")
        st.code("Arabidopsis")
        st.code("–†–∞—Å—Ç–µ–Ω–∏—è")
        st.code("plant")

with tab3:
    st.header("üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV —Ñ–∞–π–ª–æ–≤")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –ø–∏–∫–∞–º–∏ LC-MS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=['csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –º–∞—Å—Å–∞–º–∏ (m/z)"
    )
    
    if uploaded_file is not None:
        try:
            # –ß–∏—Ç–∞–µ–º CSV
            df = pd.read_csv(uploaded_file)
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            st.subheader("üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
            st.dataframe(df.head(), use_container_width=True)
            
            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –º–∞—Å—Å–∞–º–∏
            if len(df.columns) > 0:
                mass_column = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –º–∞—Å—Å–∞–º–∏ (m/z):",
                    df.columns,
                    index=0
                )
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                col1, col2 = st.columns(2)
                with col1:
                    annotation_tolerance = st.slider(
                        "–î–æ–ø—É—Å–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (ppm):",
                        min_value=1,
                        max_value=100,
                        value=10,
                        step=1
                    )
                
                with col2:
                    max_candidates = st.slider(
                        "–ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:",
                        min_value=1,
                        max_value=20,
                        value=5,
                        step=1
                    )
                
                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                if st.button("üî¨ –ù–∞—á–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", type="primary"):
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è..."):
                        try:
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                            mz_values = df[mass_column].astype(float).tolist()
                            
                            # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                            response = requests.post(
                                f"{API_BASE_URL}/annotate/csv",
                                files={"file": uploaded_file.getvalue()},
                                data={
                                    "mz_column": mass_column,
                                    "tol_ppm": annotation_tolerance
                                }
                            )
                            
                            if response.status_code == 200:
                                annotation_data = response.json()
                                st.success("‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏")
                                
                                results_data = []
                                for item in annotation_data.get("items", []):
                                    mz = item["mz"]
                                    candidates = item.get("candidates", [])
                                    best_match = item.get("best_match")
                                    
                                    results_data.append({
                                        "m/z": mz,
                                        "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã": ", ".join(candidates[:3]) if candidates else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                                        "–õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç": best_match["name"] if best_match else "–ù–µ –≤—ã–±—Ä–∞–Ω",
                                        "–§–æ—Ä–º—É–ª–∞": best_match["formula"] if best_match else "",
                                        "–ö–ª–∞—Å—Å": best_match.get("class_name", "") if best_match else ""
                                    })
                                
                                results_df = pd.DataFrame(results_data)
                                st.dataframe(results_df, use_container_width=True)
                                
                                # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                
                                # CSV —ç–∫—Å–ø–æ—Ä—Ç
                                csv_buffer = io.StringIO()
                                results_df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
                                csv_data = csv_buffer.getvalue()
                                
                                st.download_button(
                                    label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                                    data=csv_data,
                                    file_name="annotation_results.csv",
                                    mime="text/csv"
                                )
                                
                                # Excel —ç–∫—Å–ø–æ—Ä—Ç
                                excel_buffer = io.BytesIO()
                                with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                                    results_df.to_excel(writer, sheet_name='–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è', index=False)
                                excel_data = excel_buffer.getvalue()
                                
                                st.download_button(
                                    label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                                    data=excel_data,
                                    file_name="annotation_results.xlsx",
                                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                )
                                
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                                
                        except requests.exceptions.ConnectionError:
                            st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è CSV —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü–æ–≤")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

with tab4:
    st.header("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    st.subheader("üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.markdown("""
    **–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫** - —ç—Ç–æ —É—á–µ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è:
    - –ü–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –ø–æ –º–∞—Å—Å–µ, –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª–µ
    - –ü–æ–∏—Å–∫–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    - –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–∏–∫–æ–≤ LC-MS –¥–∞–Ω–Ω—ã—Ö
    - –ò–∑—É—á–µ–Ω–∏—è –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –∏ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç
    """)
    
    st.subheader("üîç –ö–∞–∫ –∏—Å–∫–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã")
    st.markdown("""
    1. **–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é**: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥–ª—é–∫–æ–∑–∞, –ø–∏—Ä—É–≤–∞—Ç)
    2. **–ü–æ —Ñ–æ—Ä–º—É–ª–µ**: –í–≤–µ–¥–∏—Ç–µ —Ö–∏–º–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: C6H12O6)
    3. **–ü–æ –º–∞—Å—Å–µ**: –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å—É (m/z) –∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ ppm
    """)
    
    st.subheader("üß™ –ö–∞–∫ –∏—Å–∫–∞—Ç—å —Ñ–µ—Ä–º–µ–Ω—Ç—ã")
    st.markdown("""
    1. **–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é**: –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Ribulose, dehydrogenase)
    2. **–ü–æ EC –Ω–æ–º–µ—Ä—É**: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.1.1.39, 1.1.1)
    3. **–ü–æ –æ—Ä–≥–∞–Ω–∏–∑–º—É**: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Arabidopsis, Cucumis)
    4. **–ü–æ —Ç–∏–ø—É**: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (plant, animal, bacteria, fungi)
    
    **–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**
    - "Ribulose" ‚Üí –Ω–∞–π–¥–µ—Ç RuBisCO –∏ –¥—Ä—É–≥–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã —Å —Ä–∏–±—É–ª–æ–∑–æ–π
    - "4.1.1.39" ‚Üí –Ω–∞–π–¥–µ—Ç —Ç–æ—á–Ω–æ RuBisCO –ø–æ EC –Ω–æ–º–µ—Ä—É
    - "dehydrogenase" ‚Üí –Ω–∞–π–¥–µ—Ç –≤—Å–µ –¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑—ã
    """)
    
    st.subheader("üìÅ –ö–∞–∫ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å CSV —Ñ–∞–π–ª—ã")
    st.markdown("""
    1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å–æ —Å—Ç–æ–ª–±—Ü–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å—ã (m/z)
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV"
    3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –º–∞—Å—Å–∞–º–∏
    4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (–¥–æ–ø—É—Å–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
    5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
    6. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV –∏–ª–∏ Excel
    """)
    
    st.subheader("üìä –§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞")
    st.markdown("""
    –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV —Ñ–∞–π–ª–∞:
    ```csv
    mz,intensity,rt
    180.063,120000,85.2
    255.232,55000,76.1
    507.182,89000,92.3
    ```
    """)
    
    st.subheader("üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±–∞–∑:
    - **HMDB** (Human Metabolome Database)
    - **KEGG** (Kyoto Encyclopedia of Genes and Genomes)
    - **ChEBI** (Chemical Entities of Biological Interest)
    - **PubChem** (Chemical Database)
    """)
    
    st.subheader("üìö –£—á–µ–±–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    st.markdown("""
    - **–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞**: "–ê–Ω–Ω–æ—Ç–∏—Ä—É–π—Ç–µ 20 –ø–∏–∫–æ–≤ LC-MS, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞"
    - **–ó–∞–¥–∞–Ω–∏–µ**: "–ù–∞–π–¥–∏—Ç–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã –¥–ª—è –º–∞—Å—Å—ã 180.063 ¬±10 ppm –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å—Å—ã–ª–æ–∫"
    - **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è**: "–°–≤—è–∂–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã —Å –ø—É—Ç—è–º–∏ –≥–ª–∏–∫–æ–ª–∏–∑–∞ –∏ —Ü–∏–∫–ª–∞ –ö—Ä–µ–±—Å–∞"
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üß¨ **–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫** - –£—á–µ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–æ–≤ –ø–æ –±–∏–æ—Ö–∏–º–∏–∏ –∏ —Ö–∏–º–∏–∏")

