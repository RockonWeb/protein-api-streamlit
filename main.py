import streamlit as st
import pandas as pd
import json
import sqlite3
import os
from typing import Dict, List, Any, Optional
import math

# -------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Protein API Server",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit
st.markdown("""
<style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display: none;}
</style>
""", unsafe_allow_html=True)

# -------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
# -------------------------

def get_database_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω)
        db_path = os.getenv("DATABASE_PATH", "metabolome.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(db_path):
            st.warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
            st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            return None
            
        return sqlite3.connect(db_path)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def search_table(table_name: str, query: str = None, page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute(f"PRAGMA table_info({table_name})")
        columns = [row[1] for row in cursor.fetchall()]
        
        if not columns:
            return {"error": f"Table {table_name} not found or empty"}
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"SELECT * FROM {table_name} WHERE 1=1"
        params = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        if query:
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            search_conditions = []
            for col in columns:
                search_conditions.append(f"{col} LIKE ?")
                params.append(f"%{query}%")
            
            if search_conditions:
                base_query += " AND (" + " OR ".join(search_conditions) + ")"
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = f"SELECT COUNT(*) FROM ({base_query})"
        cursor = conn.execute(count_query, params)
        total = cursor.fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        base_query += " LIMIT ? OFFSET ?"
        params.extend([page_size, (page - 1) * page_size])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        cursor = conn.execute(base_query, params)
        results = []
        
        for row in cursor.fetchall():
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            row_dict = {}
            for i, col in enumerate(columns):
                row_dict[col] = row[i]
            results.append(row_dict)
        
        conn.close()
        
        return {
            "results": results,
            "total": total,
            "page": page,
            "page_size": page_size,
            "total_pages": math.ceil(total / page_size),
            "table": table_name,
            "columns": columns
        }
        
    except Exception as e:
        return {"error": f"Search failed: {str(e)}"}

def search_metabolites(query: str = None, mass: float = None, tol_ppm: int = 10, 
                       page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É metabolites
        result = search_table("metabolites", query, page, page_size)
        if "error" not in result:
            return result
        
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        db_info = get_database_info()
        if "error" in db_info:
            return db_info
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã
        metabolite_tables = [t for t in db_info["tables"] if "metabolite" in t.lower() or "compound" in t.lower()]
        
        if metabolite_tables:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            return search_table(metabolite_tables[0], query, page, page_size)
        else:
            return {"error": "No metabolite tables found", "available_tables": db_info["tables"]}
            
    except Exception as e:
        return {"error": f"Search failed: {str(e)}"}

def search_enzymes(query: str = None, organism_type: str = None,
                   page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É enzymes
        result = search_table("enzymes", query, page, page_size)
        if "error" not in result:
            return result
        
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        db_info = get_database_info()
        if "error" in db_info:
            return db_info
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–µ—Ä–º–µ–Ω—Ç—ã
        enzyme_tables = [t for t in db_info["tables"] if "enzyme" in t.lower() or "protein" in t.lower()]
        
        if enzyme_tables:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            return search_table(enzyme_tables[0], query, page, page_size)
        else:
            return {"error": "No enzyme tables found", "available_tables": db_info["tables"]}
            
    except Exception as e:
        return {"error": f"Search failed: {str(e)}"}

def get_database_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        table_info = {}
        for table in tables:
            cursor = conn.execute(f"PRAGMA table_info({table})")
            columns = [{"name": row[1], "type": row[2]} for row in cursor.fetchall()]
            table_info[table] = columns
        
        conn.close()
        
        return {
            "tables": tables,
            "table_info": table_info
        }
        
    except Exception as e:
        return {"error": f"Failed to get database info: {str(e)}"}

def get_health_status() -> Dict[str, Any]:
    """–°—Ç–∞—Ç—É—Å API –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"status": "unhealthy", "error": "Database connection failed"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        db_info = get_database_info()
        if "error" in db_info:
            return {"status": "unhealthy", "error": db_info["error"]}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        table_counts = {}
        for table in db_info["tables"]:
            try:
                cursor = conn.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                table_counts[table] = count
            except Exception as e:
                table_counts[table] = f"Error: {str(e)}"
        
        conn.close()
        
        return {
            "status": "healthy",
            "database_info": db_info,
            "table_counts": table_counts,
            "timestamp": pd.Timestamp.now().isoformat()
        }
        
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}

def annotate_csv_data(file_content: bytes, mz_column: str, tol_ppm: int = 10) -> Dict[str, Any]:
    """–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(file_content)
        
        if mz_column not in df.columns:
            return {"error": f"Column '{mz_column}' not found in CSV"}
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å—ã
        mz_values = df[mz_column].astype(float).tolist()
        
        results = []
        for mz in mz_values:
            # –ò—â–µ–º –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—Å—Å—ã
            search_result = search_metabolites(query=str(mz), page_size=5)
            
            if "error" not in search_result and search_result.get("results"):
                best_match = search_result["results"][0]
                candidates = [m.get("name", str(m)) for m in search_result["results"]]
                
                results.append({
                    "mz": mz,
                    "candidates": candidates,
                    "best_match": best_match
                })
            else:
                results.append({
                    "mz": mz,
                    "candidates": [],
                    "best_match": None
                })
        
        return {
            "items": results,
            "total_annotated": len(results),
            "tolerance_ppm": tol_ppm
        }
        
    except Exception as e:
        return {"error": f"Annotation failed: {str(e)}"}

# -------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API
# -------------------------

st.title("üß¨ Metabolome API Server")
st.markdown("**API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö metabolome.db**")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
with st.sidebar:
    st.header("üîß API Testing")
    
    # –í—ã–±–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    endpoint = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        ["/health", "/metabolites/search", "/enzymes/search", "/annotate/csv"]
    )
    
    if endpoint == "/health":
        st.subheader("üè• Health Check")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            result = get_health_status()
            st.json(result)
    
    elif endpoint == "/metabolites/search":
        st.subheader("üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        db_info = get_database_info()
        if "error" not in db_info:
            available_tables = db_info["tables"]
            selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:", available_tables)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö")
            st.stop()
        
        query = st.text_input("–ó–∞–ø—Ä–æ—Å:", placeholder="–≥–ª—é–∫–æ–∑–∞, C6H12O6")
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", min_value=1, value=1)
        page_size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", [25, 50, 100, 200])
        
        if st.button("üîç –ù–∞–π—Ç–∏"):
            result = search_table(selected_table, query, page, page_size)
            st.json(result)
    
    elif endpoint == "/enzymes/search":
        st.subheader("üß™ –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º")
        
        query = st.text_input("–ó–∞–ø—Ä–æ—Å:", placeholder="Ribulose, dehydrogenase")
        organism_type = st.selectbox("–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞:", ["–í—Å–µ", "plant", "animal", "bacteria", "fungi"])
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", min_value=1, value=1)
        page_size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", [25, 50, 100, 200])
        
        if st.button("üîç –ù–∞–π—Ç–∏"):
            result = search_enzymes(
                query=query, organism_type=organism_type,
                page=page, page_size=page_size
            )
            st.json(result)
    
    elif endpoint == "/annotate/csv":
        st.subheader("üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])
        if uploaded_file:
            mz_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –º–∞—Å—Å–∞–º–∏:", ["mz", "mass", "m/z"])
            tol_ppm = st.slider("–î–æ–ø—É—Å–∫ (ppm):", 1, 100, 10)
            
            if st.button("üî¨ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                result = annotate_csv_data(
                    uploaded_file.getvalue(), mz_column, tol_ppm
                )
                st.json(result)

# -------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
# -------------------------

# –°—Ç–∞—Ç—É—Å API
st.header("üìä –°—Ç–∞—Ç—É—Å API")
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API"):
        health = get_health_status()
        if health["status"] == "healthy":
            st.success("‚úÖ API –∑–¥–æ—Ä–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            if "table_counts" in health:
                st.write("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:**")
                for table, count in health["table_counts"].items():
                    st.write(f"‚Ä¢ {table}: {count}")
        else:
            st.error(f"‚ùå API –Ω–µ–∑–¥–æ—Ä–æ–≤: {health.get('error', 'Unknown error')}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    if st.button("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"):
        db_info = get_database_info()
        if "error" not in db_info:
            st.success("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞")
            st.json(db_info)
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {db_info['error']}")

with col2:
    st.info("üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:**")
    st.write("‚Ä¢ `/health` - —Å—Ç–∞—Ç—É—Å API")
    st.write("‚Ä¢ `/metabolites/search` - –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü–µ")
    st.write("‚Ä¢ `/enzymes/search` - –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü–µ")
    st.write("‚Ä¢ `/annotate/csv` - –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV")

with col3:
    st.info("üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**")
    st.write("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API")
    st.write("–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
    st.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è")

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
st.header("üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")

tab1, tab2, tab3 = st.tabs(["üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", "üß™ –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º", "üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV"])

with tab1:
    st.markdown("""
    **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü–µ:**
    ```python
    import requests
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Ç–µ–∫—Å—Ç—É
    response = requests.get("https://your-app.streamlit.app/metabolites/search", 
                          params={"table": "your_table", "q": "search_term", "page_size": 10})
    results = response.json()
    ```
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:**
    - `table` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    - `q` - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    - `page` - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    - `page_size` - —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """)

with tab2:
    st.markdown("""
    **–ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü:**
    ```python
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î
    response = requests.get("https://your-app.streamlit.app/health")
    db_info = response.json()
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    response = requests.get("https://your-app.streamlit.app/enzymes/search", 
                          params={"table": "metabolites", "q": "glucose"})
    results = response.json()
    ```
    """)

with tab3:
    st.markdown("""
    **–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞:**
    ```python
    with open("data.csv", "rb") as f:
        files = {"file": f}
        data = {"mz_column": "mz", "tol_ppm": 10}
        response = requests.post("https://your-app.streamlit.app/annotate/csv", 
                               files=files, data=data)
    ```
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
st.header("üöÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏")
st.markdown("""
**–≠—Ç–æ—Ç Streamlit —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ API –¥–ª—è:**
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ª—é–±—ã–º —Ç–∞–±–ª–∏—Ü–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ CSV —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏

**–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö:**
1. –ü–æ–ª—É—á–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
3. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

**–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ URL:**
```
https://your-app-name.streamlit.app
```
""")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üß¨ **Metabolome API Server** - API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –±–∞–∑–µ Streamlit")

