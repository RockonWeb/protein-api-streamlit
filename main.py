import streamlit as st
import pandas as pd
import json
import sqlite3
import os
import requests
import io
from typing import Dict, List, Any, Optional
import math
import plotly.express as px

# -------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ + API",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit
st.markdown("""
<style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display: none;}
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
    .kpi-card {
        background: linear-gradient(135deg, #0ea5e9 0%, #22d3ee 100%);
        color: #ffffff;
        padding: 14px 16px;
        border-radius: 12px;
        box-shadow: 0 6px 18px rgba(2,132,199,0.25);
        border: 1px solid rgba(255,255,255,0.15);
    }
    .kpi-title {
        font-size: 13px;
        letter-spacing: 0.4px;
        opacity: 0.95;
        margin-bottom: 6px;
    }
    .kpi-value {
        font-size: 26px;
        font-weight: 700;
        line-height: 1.1;
    }
    .kpi-sub {
        font-size: 12px;
        opacity: 0.9;
        margin-top: 6px;
    }
    
    .card {
        background: #ffffff;
        border-radius: 12px;
        border: 1px solid rgba(0,0,0,0.07);
        box-shadow: 0 6px 18px rgba(0,0,0,0.06);
        padding: 14px 14px 12px 14px;
        margin-bottom: 12px;
    }
    .card-title {
        font-size: 16px;
        font-weight: 700;
        margin: 0 0 6px 0;
    }
    .card-subtitle { font-size: 12px; color: #475569; margin-bottom: 10px; }
    .pill {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 999px;
        background: #f1f5f9;
        color: #0f172a;
        font-size: 11px;
        border: 1px solid #e2e8f0;
        margin-right: 6px;
        margin-bottom: 6px;
    }
</style>
""", unsafe_allow_html=True)

# -------------------------
# API —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------

def get_database_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω)
        db_path = os.getenv("DATABASE_PATH", "metabolome.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(db_path):
            return None
            
        return sqlite3.connect(db_path)
    except Exception as e:
        return None

def get_database_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        table_info = {}
        for table in tables:
            cursor = conn.execute(f"PRAGMA table_info({table})")
            columns = [{"name": row[1], "type": row[2]} for row in cursor.fetchall()]
            table_info[table] = columns
        
        conn.close()
        
        return {
            "tables": tables,
            "table_info": table_info
        }
        
    except Exception as e:
        return {"error": f"Failed to get database info: {str(e)}"}

def get_health_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π."""
    conn = get_database_connection()
    if conn is None:
        return {"status": "unhealthy", "message": "Database connection failed"}
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        db_info = get_database_info()
        if "error" in db_info:
            return {"status": "unhealthy", "error": db_info["error"]}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        table_counts = {}
        for table in db_info["tables"]:
            try:
                cursor = conn.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                table_counts[table] = count
            except Exception as e:
                table_counts[table] = f"Error: {str(e)}"
        
        conn.close()
        return {
            "status": "healthy",
            "message": "API is healthy",
            "database_info": db_info,
            "table_counts": table_counts,
            "timestamp": pd.Timestamp.now().isoformat()
        }
    except Exception as e:
        return {"status": "unhealthy", "message": f"Database query failed: {e}"}
    finally:
        if conn:
            conn.close()

def search_table(table_name: str, query: str = None, page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute(f"PRAGMA table_info({table_name})")
        columns = [row[1] for row in cursor.fetchall()]
        
        if not columns:
            return {"error": f"Table {table_name} not found or empty"}
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"SELECT * FROM {table_name} WHERE 1=1"
        params = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        if query:
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö
            search_conditions = []
            for col in columns:
                search_conditions.append(f"{col} LIKE ?")
                params.append(f"%{query}%")
            
            if search_conditions:
                base_query += " AND (" + " OR ".join(search_conditions) + ")"
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = f"SELECT COUNT(*) FROM ({base_query})"
        cursor = conn.execute(count_query, params)
        total = cursor.fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        base_query += " LIMIT ? OFFSET ?"
        params.extend([page_size, (page - 1) * page_size])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        cursor = conn.execute(base_query, params)
        results = []
        
        for row in cursor.fetchall():
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            row_dict = {}
            for i, col in enumerate(columns):
                row_dict[col] = row[i]
            results.append(row_dict)
        
        conn.close()
        
        return {
            "table": table_name,
            "total": total,
            "page": page,
            "page_size": page_size,
            "results": results
        }
        
    except Exception as e:
        return {"error": f"Search failed: {str(e)}"}

def search_metabolites(query: str = None, mass: float = None, tol_ppm: int = 10, page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Å—Å–µ"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É metabolites
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%metabolite%'")
        metabolite_tables = [row[0] for row in cursor.fetchall()]
        
        if not metabolite_tables:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã metabolites, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            return search_table("metabolites", query, page, page_size)
        
        table_name = metabolite_tables[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute(f"PRAGMA table_info({table_name})")
        columns = [row[1] for row in cursor.fetchall()]
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"SELECT * FROM {table_name} WHERE 1=1"
        params = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if query:
            # –ò—â–µ–º –ø–æ–ª—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            text_fields = [col for col in columns if any(keyword in col.lower() for keyword in ['name', 'formula', 'class'])]
            if text_fields:
                search_conditions = [f"{col} LIKE ?" for col in text_fields]
                base_query += " AND (" + " OR ".join(search_conditions) + ")"
                params.extend([f"%{query}%" for _ in text_fields])
        
        # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Å—Å–µ
        if mass:
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –º–∞—Å—Å—ã
            mass_fields = [col for col in columns if any(keyword in col.lower() for keyword in ['mass', 'weight', 'mz'])]
            if mass_fields:
                mass_field = mass_fields[0]
                tolerance = mass * tol_ppm / 1000000
                base_query += f" AND {mass_field} BETWEEN ? AND ?"
                params.extend([mass - tolerance, mass + tolerance])
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = f"SELECT COUNT(*) FROM ({base_query})"
        cursor = conn.execute(count_query, params)
        total = cursor.fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        base_query += " LIMIT ? OFFSET ?"
        params.extend([page_size, (page - 1) * page_size])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        cursor = conn.execute(base_query, params)
        results = []
        
        for row in cursor.fetchall():
            row_dict = {}
            for i, col in enumerate(columns):
                row_dict[col] = row[i]
            results.append(row_dict)
        
        conn.close()
        
        return {
            "metabolites": results,
            "total": total,
            "page": page,
            "page_size": page_size
        }
        
    except Exception as e:
        return {"error": f"Metabolite search failed: {str(e)}"}

def search_enzymes(query: str = None, organism_type: str = None, page: int = 1, page_size: int = 50) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤"""
    try:
        conn = get_database_connection()
        if not conn:
            return {"error": "Database connection failed"}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É enzymes
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%enzyme%'")
        enzyme_tables = [row[0] for row in cursor.fetchall()]
        
        if not enzyme_tables:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã enzymes, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            return search_table("enzymes", query, page, page_size)
        
        table_name = enzyme_tables[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute(f"PRAGMA table_info({table_name})")
        columns = [row[1] for row in cursor.fetchall()]
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"SELECT * FROM {table_name} WHERE 1=1"
        params = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if query:
            # –ò—â–µ–º –ø–æ–ª—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            text_fields = [col for col in columns if any(keyword in col.lower() for keyword in ['name', 'ec', 'family'])]
            if text_fields:
                search_conditions = [f"{col} LIKE ?" for col in text_fields]
                base_query += " AND (" + " OR ".join(search_conditions) + ")"
                params.extend([f"%{query}%" for _ in text_fields])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ä–≥–∞–Ω–∏–∑–º–∞
        if organism_type and organism_type != "–í—Å–µ":
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞
            org_fields = [col for col in columns if any(keyword in col.lower() for keyword in ['organism', 'type', 'species'])]
            if org_fields:
                org_field = org_fields[0]
                base_query += f" AND {org_field} LIKE ?"
                params.append(f"%{organism_type}%")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = f"SELECT COUNT(*) FROM ({base_query})"
        cursor = conn.execute(count_query, params)
        total = cursor.fetchone()[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        base_query += " LIMIT ? OFFSET ?"
        params.extend([page_size, (page - 1) * page_size])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        cursor = conn.execute(base_query, params)
        results = []
        
        for row in cursor.fetchall():
            row_dict = {}
            for i, col in enumerate(columns):
                row_dict[col] = row[i]
            results.append(row_dict)
        
        conn.close()
        
        return {
            "enzymes": results,
            "total": total,
            "page": page,
            "page_size": page_size
        }
        
    except Exception as e:
        return {"error": f"Enzyme search failed: {str(e)}"}

def annotate_csv_data(file_content: bytes, mz_column: str, tol_ppm: int = 10) -> Dict[str, Any]:
    """–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º–∏"""
    try:
        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(io.BytesIO(file_content))
        
        if mz_column not in df.columns:
            return {"error": f"Column {mz_column} not found in CSV"}
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å—ã
        mz_values = df[mz_column].astype(float).tolist()
        
        # –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–∞—Å—Å—É
        annotated_items = []
        for mz in mz_values:
            # –ò—â–µ–º –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã –ø–æ –º–∞—Å—Å–µ
            metabolites = search_metabolites(mass=mz, tol_ppm=tol_ppm, page_size=5)
            
            if "error" not in metabolites and metabolites.get("metabolites"):
                candidates = [met.get("name", "Unknown") for met in metabolites["metabolites"]]
                best_match = metabolites["metabolites"][0] if metabolites["metabolites"] else None
            else:
                candidates = []
                best_match = None
            
            annotated_items.append({
                "mz": mz,
                "candidates": candidates,
                "best_match": best_match
            })
        
        return {
            "items": annotated_items,
            "total_annotated": len(annotated_items),
            "tolerance_ppm": tol_ppm
        }
        
    except Exception as e:
        return {"error": f"Annotation failed: {str(e)}"}

# -------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–µ–∂–∏–º–∞
# -------------------------

def is_api_mode():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ API —Ä–µ–∂–∏–º–µ"""
    query_params = st.experimental_get_query_params()
    return "api" in query_params or "format" in query_params

def handle_api_request():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON"""
    query_params = st.experimental_get_query_params()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    api_type = query_params.get("api", [None])[0]
    format_type = query_params.get("format", ["json"])[0]
    
    if api_type == "health":
        result = get_health_status()
    elif api_type == "metabolites":
        query = query_params.get("q", [None])[0]
        mass = query_params.get("mass", [None])[0]
        tol_ppm = int(query_params.get("tol_ppm", [10])[0])
        page = int(query_params.get("page", [1])[0])
        page_size = int(query_params.get("page_size", [50])[0])
        
        if mass:
            mass = float(mass)
        result = search_metabolites(query, mass, tol_ppm, page, page_size)
    elif api_type == "enzymes":
        query = query_params.get("q", [None])[0]
        organism_type = query_params.get("organism_type", [None])[0]
        page = int(query_params.get("page", [1])[0])
        page_size = int(query_params.get("page_size", [50])[0])
        result = search_enzymes(query, organism_type, page, page_size)
    elif api_type == "annotate":
        # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω POST –∑–∞–ø—Ä–æ—Å, –Ω–æ Streamlit –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ GET
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        result = {
            "error": "CSV annotation requires POST request. Use the UI interface instead."
        }
    else:
        result = {
            "error": "Unknown API endpoint",
            "available_endpoints": ["health", "metabolites", "enzymes", "annotate"]
        }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if format_type == "json":
        st.json(result)
    else:
        st.write(result)
    
    st.stop()

# -------------------------
# UI —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------

def render_kpi(label: str, value: str, sub: str = ""):
    """–†–∏—Å—É–µ—Ç KPI-–∫–∞—Ä—Ç–æ—á–∫—É"""
    st.markdown(
        f"""
        <div class="kpi-card">
          <div class="kpi-title">{label}</div>
          <div class="kpi-value">{value}</div>
          <div class="kpi-sub">{sub}</div>
        </div>
        """,
        unsafe_allow_html=True,
    )

def render_metabolite_card(met: Dict[str, Any]):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞"""
    name = met.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    formula = met.get("formula") or "‚Äî"
    mass = met.get("exact_mass") or met.get("mass") or met.get("molecular_weight")
    mass_fmt = f"{mass:.6f} Da" if isinstance(mass, (int, float)) else "‚Äî"
    cls = met.get("class_name") or met.get("class") or "‚Äî"
    
    st.markdown(
        f"""
        <div class="card">
          <div class="card-title">{name}</div>
          <div class="card-subtitle">–§–æ—Ä–º—É–ª–∞: <b>{formula}</b> &nbsp;|&nbsp; –ú–∞—Å—Å–∞: <b>{mass_fmt}</b></div>
          <div><span class='pill'>{cls}</span></div>
        </div>
        """,
        unsafe_allow_html=True,
    )

def render_enzyme_card(enzyme: Dict[str, Any]):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–∞"""
    name = enzyme.get("name") or enzyme.get("name_en") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    ec = enzyme.get("ec_number") or enzyme.get("ec") or "‚Äî"
    org = enzyme.get("organism") or "‚Äî"
    fam = enzyme.get("family") or "‚Äî"
    
    st.markdown(
        f"""
        <div class="card">
          <div class="card-title">{name}</div>
          <div class="card-subtitle">EC: <b>{ec}</b> &nbsp;|&nbsp; –û—Ä–≥–∞–Ω–∏–∑–º: <b>{org}</b></div>
          <div><span class='pill'>{fam}</span></div>
        </div>
        """,
        unsafe_allow_html=True,
    )

# -------------------------
# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤ API —Ä–µ–∂–∏–º–µ
    if is_api_mode():
        handle_api_request()
        return
    
    # UI —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üß¨ –ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ + API")
    st.markdown("**–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤, —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –∏ API –¥–æ—Å—Ç—É–ø–∞**")
    
    # KPI –ø–∞–Ω–µ–ª—å
    health_status = get_health_status()
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if health_status.get("status") == "healthy":
            total_metabolites = health_status.get("table_counts", {}).get("metabolites", 0)
            render_kpi("–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", str(total_metabolites), "–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            render_kpi("–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", "‚Äî", "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    with col2:
        if health_status.get("status") == "healthy":
            total_enzymes = health_status.get("table_counts", {}).get("enzymes", 0)
            render_kpi("–§–µ—Ä–º–µ–Ω—Ç—ã", str(total_enzymes), "–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            render_kpi("–§–µ—Ä–º–µ–Ω—Ç—ã", "‚Äî", "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    with col3:
        status = health_status.get("status", "unknown")
        status_ru = "–æ–Ω–ª–∞–π–Ω" if status == "healthy" else "–æ—Ñ–ª–∞–π–Ω"
        render_kpi("–°—Ç–∞—Ç—É—Å API", status_ru, "—Å–µ—Ä–≤–∏—Å /health")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.markdown("## üîç **–ü–æ–∏—Å–∫**")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    search_type = st.sidebar.radio(
        "–¢–∏–ø –ø–æ–∏—Å–∫–∞",
        options=["üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", "üß™ –§–µ—Ä–º–µ–Ω—Ç—ã"],
        horizontal=True
    )
    
    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
    if search_type == "üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã":
        with st.sidebar.form("metabolite_search"):
            st.subheader("üîç –ü–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
            
            mode = st.radio("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞", ["–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "–ü–æ –º–∞—Å—Å–µ"])
            
            if mode == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
                query = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∞", placeholder="–≥–ª—é–∫–æ–∑–∞, C6H12O6")
                mass = None
            else:
                query = None
                mass = st.number_input("–ú–∞—Å—Å–∞ (m/z)", min_value=0.0, step=0.001, format="%.6f")
            
            tolerance = st.slider("–î–æ–ø—É—Å–∫ (ppm)", 1, 100, 10)
            page_size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", [25, 50, 100])
            
            if st.form_submit_button("üîç –ù–∞–π—Ç–∏"):
                results = search_metabolites(query, mass, tolerance, 1, page_size)
                if "error" not in results:
                    st.session_state.metabolite_results = results
                    st.session_state.search_type = "metabolites"
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {results['error']}")
    
    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
    else:
        with st.sidebar.form("enzyme_search"):
            st.subheader("üîç –ü–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
            
            query = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ, EC –Ω–æ–º–µ—Ä", placeholder="Ribulose, 4.1.1.39")
            organism_type = st.selectbox("–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞", ["–í—Å–µ", "plant", "animal", "bacteria"])
            page_size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", [25, 50, 100])
            
            if st.form_submit_button("üîç –ù–∞–π—Ç–∏"):
                results = search_enzymes(query, organism_type, 1, page_size)
                if "error" not in results:
                    st.session_state.enzyme_results = results
                    st.session_state.search_type = "enzymes"
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {results['error']}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if st.session_state.get("search_type") == "metabolites" and st.session_state.get("metabolite_results"):
        results = st.session_state.metabolite_results
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {results['total']} –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results.get("metabolites"):
            cols = st.columns(3)
            for idx, met in enumerate(results["metabolites"]):
                with cols[idx % 3]:
                    render_metabolite_card(met)
    
    elif st.session_state.get("search_type") == "enzymes" and st.session_state.get("enzyme_results"):
        results = st.session_state.enzyme_results
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {results['total']} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results.get("enzymes"):
            cols = st.columns(3)
            for idx, enzyme in enumerate(results["enzymes"]):
                with cols[idx % 3]:
                    render_enzyme_card(enzyme)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üîç –ü–æ–∏—Å–∫", "üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV", "üîå API"])
    
    with tab1:
        st.header("üîç –ü–æ–∏—Å–∫")
        st.markdown("""
        **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞!**
        
        - **–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã**: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ñ–æ—Ä–º—É–ª–µ –∏–ª–∏ –º–∞—Å—Å–µ
        - **–§–µ—Ä–º–µ–Ω—Ç—ã**: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, EC –Ω–æ–º–µ—Ä—É –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–º—É
        """)
    
    with tab2:
        st.header("üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è CSV")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –ø–∏–∫–∞–º–∏ LC-MS –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏")
        
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])
        if uploaded_file:
            df = pd.read_csv(uploaded_file)
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
            st.dataframe(df.head())
            
            if len(df.columns) > 0:
                mass_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –º–∞—Å—Å–∞–º–∏:", df.columns)
                tolerance = st.slider("–î–æ–ø—É—Å–∫ (ppm):", 1, 100, 10)
                
                if st.button("üî¨ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è..."):
                        results = annotate_csv_data(
                            uploaded_file.getvalue(),
                            mass_column,
                            tolerance
                        )
                        
                        if "error" not in results:
                            st.success("‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            st.json(results)
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
    
    with tab3:
        st.header("üîå API Endpoints")
        st.markdown("""
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:**
        
        - **`?api=health`** - —Å—Ç–∞—Ç—É—Å API –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
        - **`?api=metabolites&q=–≥–ª—é–∫–æ–∑–∞`** - –ø–æ–∏—Å–∫ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
        - **`?api=enzymes&q=ribulose`** - –ø–æ–∏—Å–∫ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
        - **`?api=metabolites&mass=180.063&tol_ppm=10`** - –ø–æ–∏—Å–∫ –ø–æ –º–∞—Å—Å–µ
        
        **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
        - `/metabolites/search?q=–≥–ª—é–∫–æ–∑–∞&page_size=10`
        - `/enzymes/search?organism_type=plant`
        - `/health`
        """)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
        test_endpoint = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            ["health", "metabolites", "enzymes"]
        )
        
        if test_endpoint == "metabolites":
            test_query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "–≥–ª—é–∫–æ–∑–∞")
            if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                test_url = f"?api=metabolites&q={test_query}&format=json"
                st.info(f"API URL: {test_url}")
                st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –≤ API —Ä–µ–∂–∏–º–µ]({test_url})")
        
        elif test_endpoint == "enzymes":
            test_query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "ribulose")
            if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                test_url = f"?api=enzymes&q={test_query}&format=json"
                st.info(f"API URL: {test_url}")
                st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –≤ API —Ä–µ–∂–∏–º–µ](test_url)")
        
        else:  # health
            if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                test_url = "?api=health&format=json"
                st.info(f"API URL: {test_url}")
                st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –≤ API —Ä–µ–∂–∏–º–µ]({test_url})")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("üß¨ **–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ + API** - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–æ—Ö–∏–º–∏–∏")

if __name__ == "__main__":
    main()

